// <auto-generated />
using System;
using GestorStock.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GestorStock.Data.Migrations
{
    [DbContext(typeof(StockDbContext))]
    [Migration("20251001101908_InitialCreate_GP")]
    partial class InitialCreate_GP
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("GestorStock.Model.Entities.Explotacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TipoExplotacionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TipoExplotacionId");

                    b.ToTable("Explotaciones");
                });

            modelBuilder.Entity("GestorStock.Model.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ExplotacionId")
                        .HasColumnType("int");

                    b.Property<string>("NombreUbicacion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PedidoId")
                        .HasColumnType("int");

                    b.Property<int>("TipoExplotacionId")
                        .HasColumnType("int");

                    b.Property<int>("TipoItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExplotacionId");

                    b.HasIndex("PedidoId");

                    b.HasIndex("TipoExplotacionId");

                    b.HasIndex("TipoItemId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("GestorStock.Model.Entities.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("longtext");

                    b.Property<string>("DescripcionIncidencia")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaIncidencia")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaLlegada")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Incidencia")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Pedidos");
                });

            modelBuilder.Entity("GestorStock.Model.Entities.Repuesto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(11, 2)");

                    b.Property<int?>("TipoRepuestoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("TipoRepuestoId");

                    b.ToTable("Repuestos");
                });

            modelBuilder.Entity("GestorStock.Model.Entities.TipoExplotacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TipoExplotaciones");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "INTERCAMBIADOR"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "MERCADO"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "MONOPOSTE"
                        },
                        new
                        {
                            Id = 4,
                            Nombre = "SKYLED"
                        });
                });

            modelBuilder.Entity("GestorStock.Model.Entities.TipoRepuesto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TipoRepuestos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Original"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Usado"
                        });
                });

            modelBuilder.Entity("GestorStock.Model.Entities.TipoSoporte", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TiposItem");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Pantalla"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Mupis"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "Monoposte"
                        },
                        new
                        {
                            Id = 4,
                            Nombre = "Skyled"
                        });
                });

            modelBuilder.Entity("GestorStock.Model.Entities.Explotacion", b =>
                {
                    b.HasOne("GestorStock.Model.Entities.TipoExplotacion", "TipoExplotacion")
                        .WithMany()
                        .HasForeignKey("TipoExplotacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoExplotacion");
                });

            modelBuilder.Entity("GestorStock.Model.Entities.Item", b =>
                {
                    b.HasOne("GestorStock.Model.Entities.Explotacion", null)
                        .WithMany("Items")
                        .HasForeignKey("ExplotacionId");

                    b.HasOne("GestorStock.Model.Entities.Pedido", "Pedido")
                        .WithMany("Items")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestorStock.Model.Entities.TipoExplotacion", "TipoExplotacion")
                        .WithMany("Items")
                        .HasForeignKey("TipoExplotacionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestorStock.Model.Entities.TipoSoporte", "TipoSoporte")
                        .WithMany("Items")
                        .HasForeignKey("TipoItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedido");

                    b.Navigation("TipoExplotacion");

                    b.Navigation("TipoSoporte");
                });

            modelBuilder.Entity("GestorStock.Model.Entities.Repuesto", b =>
                {
                    b.HasOne("GestorStock.Model.Entities.Item", "Item")
                        .WithMany("Repuestos")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestorStock.Model.Entities.TipoRepuesto", "TipoRepuesto")
                        .WithMany("Repuestos")
                        .HasForeignKey("TipoRepuestoId");

                    b.Navigation("Item");

                    b.Navigation("TipoRepuesto");
                });

            modelBuilder.Entity("GestorStock.Model.Entities.Explotacion", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("GestorStock.Model.Entities.Item", b =>
                {
                    b.Navigation("Repuestos");
                });

            modelBuilder.Entity("GestorStock.Model.Entities.Pedido", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("GestorStock.Model.Entities.TipoExplotacion", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("GestorStock.Model.Entities.TipoRepuesto", b =>
                {
                    b.Navigation("Repuestos");
                });

            modelBuilder.Entity("GestorStock.Model.Entities.TipoSoporte", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
